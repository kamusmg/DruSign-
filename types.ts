// FIX: Define and export the Point type to resolve circular dependency and export errors.
export type Point = [number, number]; // [x, y] as percentages from 0 to 1

// Represents a user-drawn annotation on an image.
export interface Annotation {
  id: number;
  x: number; // percentage
  y: number; // percentage
  instruction: string;
}

// Represents a geometric area defined by the user on an image.
export interface Area {
    id: string;
    type: 'rect' | 'quad' | 'ruler';
    points: Point[];
    content: {
        background?: {
            type: 'none' | 'paint' | 'acm' | 'vinyl';
            color?: string;
        };
        texts: {
            title?: string;
            subtitle?: string;
            phone?: string;
        };
    };
}

// Calibration data to convert pixel distances to real-world measurements.
export interface Calibration {
    points: Point[];
    realDistanceMeters: number;
    pixelsPerMeter: number;
}

// Represents a logo, either generated or uploaded.
export interface Logo {
    base64: string;
    prompt: string; // Original prompt or filename
}

// --- Sticker Types ---

export type StickerFinish = 
    | 'Brilhante' 
    | 'Fosco' 
    | 'Jateado' 
    | 'Metálico' 
    | 'Aço Escovado' 
    | 'Cromado / Espelhado' 
    | 'Refletivo' 
    | 'Fibra de Carbono' 
    | 'Holográfico';

export interface StickerPatternData {
    placement: string;
    theme: string;
    generatedPattern?: Logo;
}

export interface StickerCutData {
    placement: string;
    description: string;
    finish: StickerFinish;
    color: string; // Hex for solid, name (e.g., "Dourado") for metallic
}

export interface StickerPrintData {
    placement: string;
    printFile: Logo | null;
    hasContourCut: boolean;
    isPerforated: boolean;
}

export type StickerDetail = {
    id: string;
} & (
    | { type: 'pattern'; data: StickerPatternData }
    | { type: 'cut'; data: StickerCutData }
    | { type: 'print'; data: StickerPrintData }
);

// --- Totem Details ---
export type TotemSize = 'small' | 'medium' | 'large';
export type TotemFeature = 'luminous' | 'channel_letter';

export interface TotemDetails {
    size: TotemSize;
    features: TotemFeature[];
}

// --- Banner/Faixa Details ---
export type BannerFaixaType = 'banner' | 'faixa';
export type BannerFaixaSizeType = 'preset' | 'custom';
export type BannerFaixaArtType = 'ai_generic' | 'ai_prompt' | 'upload';

export interface BannerFaixaDetails {
    type: BannerFaixaType;
    sizeType: BannerFaixaSizeType;
    presetSize: string;
    customWidth: string;
    customHeight: string;
    artType: BannerFaixaArtType;
    artPrompt: string;
    artFile: Logo | null;
}

// --- Vehicle Details ---
export interface VehicleDetails {
    selectedTypes: string[];
    customName: string;
}


// The main data structure for a user's detailed redesign request.
export type MainSignType = 'lona' | 'acm_adesivo' | 'acm_letra_caixa' | 'placa_iluminada';
export type LogoOption = 'use_from_photo' | 'reinvent_from_photo' | 'generate' | 'upload';
export type LightingOption = 'spots' | 'uplighting' | 'contour_led';
export type LonaInstallationType = 'grommets' | 'hidden_finish';

export interface DetailedRequestData {
  companyName: string;
  mainSignType: MainSignType;
  lonaInstallationType: LonaInstallationType;
  logoOption: LogoOption;
  logoPrompt: string;
  logoFile: Logo | null;
  elements: string[];
  acmColor: string;
  acmColorName: string;
  acmPlacement: {
    selections: string[];
    custom: string;
  };
  paintColor: string;
  lightingOptions: LightingOption[];
  totemDetails: TotemDetails;
  bannerFaixaDetails: BannerFaixaDetails;
  informationalSignsText: string;
  vehicleDetails: VehicleDetails;
  channelLetterColor: string;
  channelLetterColorMode: 'original' | 'monochromatic';
  additionalText: { text: string; location: string };
  ambiance: 'day' | 'night';
  inspiration: string;
  customInstructions: string[];
  stickerDetails: StickerDetail[];
}

// An item in the technical plan generated by the AI.
export interface TechnicalPlanItem {
    item: string;
    material: string;
    dimensions: string;
    details: string;
}

// The final result of a redesign generation.
export interface RedesignResult {
    redesignedImage: string; // base64 data URL
    originalPrompt: string;
    enhancedPrompt: string;
    finalLogo: Logo | null;
    technicalPlan: TechnicalPlanItem[];
}

// Status for asynchronous deliverable generation.
export interface DeliverableStatus {
    status: 'idle' | 'generating' | 'ready';
    timestamp?: number;
}

export type DeliverableKey = 'presentationPdf' | 'budgetSheetXlsx';

export type DeliverablesStatus = Record<DeliverableKey, DeliverableStatus>;

// State for the visual editor component.
export interface VisualEditorState {
    annotations: Annotation[];
    generalPrompt: string;
}