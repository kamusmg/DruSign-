import React, { useState, useMemo, useRef, useEffect } from 'react';
import { TrashIcon } from './Icons.tsx';

interface InspirationGalleryProps {
  autoGeneratedInspiration: string;
  customInstructions: string[];
  onAddCustomInstruction: (instruction: string) => void;
  onRemoveCustomInstruction: (index: number) => void;
}

export const InspirationGallery: React.FC<InspirationGalleryProps> = ({ 
  autoGeneratedInspiration,
  customInstructions,
  onAddCustomInstruction,
  onRemoveCustomInstruction
}) => {
  const [newInstruction, setNewInstruction] = useState('');
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  useEffect(() => {
    if (textareaRef.current) {
        textareaRef.current.style.height = 'auto';
        textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [newInstruction]);

  const handleAdd = () => {
    if (newInstruction.trim()) {
      onAddCustomInstruction(newInstruction.trim());
      setNewInstruction('');
    }
  };
  
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleAdd();
    }
  };

  const finalDescription = useMemo(() => {
    if (customInstructions.length === 0) {
      return autoGeneratedInspiration;
    }
    const additionalText = customInstructions.join('. ');
    return `${autoGeneratedInspiration} ${additionalText}`;
  }, [autoGeneratedInspiration, customInstructions]);

  return (
    <div className="space-y-4">
      <div>
          <h3 className="text-md font-semibold text-gray-800 dark:text-gray-200 mb-2">
              Instruções Adicionais (Opcional)
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
              Adicione qualquer detalhe ou estilo que não foi coberto pelas opções. Ex: "O nome da empresa no logo é 'Minha Loja'", "Use um estilo mais rústico".
          </p>
          <div className="flex items-start gap-2">
            <textarea
                ref={textareaRef}
                value={newInstruction}
                onChange={(e) => setNewInstruction(e.target.value)}
                onKeyDown={handleKeyDown}
                rows={1}
                placeholder="Digite uma instrução e clique em Adicionar..."
                className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 focus:ring-cyan-500 focus:border-cyan-500 resize-none overflow-hidden"
            />
            <button
                type="button"
                onClick={handleAdd}
                className="px-4 h-[48px] bg-cyan-600 text-white font-semibold rounded-lg hover:bg-cyan-700 transition shadow-sm disabled:bg-gray-400"
                disabled={!newInstruction.trim()}
            >
                Adicionar
            </button>
          </div>
          {customInstructions.length > 0 && (
            <div className="mt-3 flex flex-wrap gap-2">
                {customInstructions.map((instruction, index) => (
                    <div key={index} className="flex items-center gap-2 bg-gray-200 dark:bg-gray-700 rounded-full px-3 py-1 text-sm animate-fade-in">
                        <span className="text-gray-800 dark:text-gray-200">{instruction}</span>
                        <button
                            type="button"
                            onClick={() => onRemoveCustomInstruction(index)}
                            className="p-0.5 rounded-full text-gray-500 hover:bg-red-200 dark:hover:bg-red-800/50 hover:text-red-600"
                        >
                            <TrashIcon className="w-4 h-4" />
                        </button>
                    </div>
                ))}
            </div>
          )}
      </div>

      <div>
        <h3 className="text-md font-semibold text-gray-800 dark:text-gray-200 mb-2">
            Descrição Gerada para o Projeto
        </h3>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
          Esta é a descrição que será enviada para a IA, baseada nas suas seleções. Ela é atualizada automaticamente.
        </p>
        <textarea
          value={finalDescription}
          readOnly
          rows={5}
          className="w-full p-3 border border-gray-200 dark:border-gray-700 rounded-md bg-gray-100 dark:bg-gray-900/50 cursor-default"
        />
      </div>

    </div>
  );
};